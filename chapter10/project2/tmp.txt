```ch10-proj02.html
<!DOCTYPE html>
<html lang="en-US">
<head>
  <meta charset="UTF-8">  
  <title>Chapter 10</title>   
  <link href="https://fonts.googleapis.com/css2?family=Cormorant+Garamond:ital,wght@0,400;0,600;0,700;1,400;1,500&family=Roboto+Condensed:wght@400;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="ch10-proj02.css">
  <script src="play-module.js" type="module"></script> 
  <script src="ch10-proj02.js" type="module"></script> 
</head>

<body>
  <header>
    <h1>Project 2 - Shakespeare Play Viewer</h1>
  </header>
  
  <main>
    <aside>
      <select id="playList">
        <option value=0>Choose a Play</option>
        <option value="hamlet">Hamlet</option>
        <option value="jcaesar">Julius Caesar</option>
      </select>
      <fieldset id="interface">
        <select id="actList"></select>
        <select id="sceneList"></select>
        <fieldset>
          <select id="playerList">
            <option value=0>All Players</option>
          </select>
          <input type="text" id="txtHighlight" placeholder="Enter a search term">
          <button id="btnHighlight">Filter</button>
        </fieldset>
      </fieldset>
    </aside>
    
    <section id="playHere">
      <!-- Note you will need to remove or comment out some of this markup; 
        it is there to show you the markup that your javascript will need to generate.
      -->
      <h2>Play title here</h2>
      <article id="actHere">
        <h3>Act name here</h3>
        <div id="sceneHere">
          <h4>Scene name here</h4>
          <p class="title">scene title</p>
          <p class="direction">stage direction</p>
          <div class="speech"><span>BERNARDO</span><p>Who's there?</p></div>
          <div class="speech"><span>FRANCISCO</span><p>Nay, answer me: <b>stand</b>, and unfold yourself.</p></div>
          <div class="speech"><span>MARCELLUS</span><p>'Tis gone!</p><p>We do it wrong, being so majestical,</p><p>To offer it the show of violence;</p><p>For it is, as the air, invulnerable,</p><p>And our vain blows malicious mockery.</p><em>Exit Ghost</em></div>
        </div>
      </article>
    </section>
  </main>
</body>
</html>
```

```ch10-proj02.js
import { Play, Act, Scene } from './play-module.js';

document.addEventListener("DOMContentLoaded", () => {
  const url = 'https://www.randyconnolly.com/funwebdev/3rd/api/shakespeare/play.php';
  
  /*
    To get a specific play, add play name via query string,
    e.g., url = url + '?name=hamlet';
    https://www.randyconnolly.com/funwebdev/3rd/api/shakespeare/play.php?name=hamlet
    https://www.randyconnolly.com/funwebdev/3rd/api/shakespeare/play.php?name=jcaesar
  */
  
  /* note: you may get a CORS error if you test this locally (i.e., directly from a
    local file). To work correctly, this needs to be tested on a local web server.
    Some possibilities: if using Visual Code, use Live Server extension; if Brackets,
    use built-in Live Preview.
  */
  
  const playList = document.querySelector('#playList');
  const actList = document.querySelector('#actList');
  const sceneList = document.querySelector('#sceneList');
  const playHere = document.querySelector('#playHere');
  const actHere = document.querySelector('#actHere');
  const sceneHere = document.querySelector('#sceneHere');
  
  let playData = {};
  let currentActs = [];
  const playHereBackup = playHere.innerHTML;
  
  playList.addEventListener('change', async (e) => {
    const newUrl = url + `?name=${e.target.value}`;
    
    try {
      const response = await fetch(newUrl);
      
      if (!response.ok) {
        throw new Error('Network response was not ok.');
      }
      
      const data = await response.json();
      
      actList.innerHTML = '';
      sceneList.innerHTML = '';
      playData = data;
      currentActs = data.acts;
      
      if (Array.isArray(currentActs)) {
        let firstAct = true;
        
        currentActs.forEach(act => {
          const option = document.createElement('option');
          option.textContent = act.name;
          option.setAttribute('value', act.name);
          actList.appendChild(option);
          
          if (firstAct) {
            let firstScene = true;
            
            act.scenes.forEach(scene => {
              const option = document.createElement('option');
              option.textContent = scene.name;
              option.setAttribute('value', scene.name);
              sceneList.appendChild(option);
              
              if (firstScene) {
                playHere.innerHTML = '';
                // displayScene(act, scene);
                const display = new Play(playData, playHere, act, scene);
                display.displayPlay();
                firstScene = false;
              }
            });
            
            firstAct = false;
          }
        });
      } else {
        playHere.innerHTML = playHereBackup;
      }
    } catch (error) {
      console.error(error);
    }
  });
  
  actList.addEventListener('change', (e) => {
    const selectedAct = currentActs.find(act => act.name === e.target.value);
    
    sceneList.innerHTML = '';
    
    let firstScene = true;
    
    selectedAct.scenes.forEach(scene => {
      const option = document.createElement('option');
      option.textContent = scene.name;
      option.setAttribute('value', scene.name);
      sceneList.appendChild(option);
      
      if (firstScene) {
        playHere.innerHTML = '';
        // displayScene(selectedAct, scene);
        const display = new Play(playData, playHere, selectedAct, scene);
        display.displayPlay();
        firstScene = false;
      }
    });
  });
  
  sceneList.addEventListener('change', (e) => {
    const selectedAct = currentActs.find(act => act.name === actList.value);
    const selectedScene = selectedAct.scenes.find(scene => scene.name === e.target.value);
    
    playHere.innerHTML = '';
    // displayScene(selectedAct, selectedScene);
    const display = new Play(playData, playHere, selectedAct, selectedScene);
    display.displayPlay();
  });
  
  /*
  function displayScene(act, scene) {
    const h2 = document.createElement('h2');
    h2.textContent = playData.title;
    playHere.appendChild(h2);
    
    const article = document.createElement('article');
    article.setAttribute('id', 'actHere');
    
    const h3 = document.createElement('h3');
    h3.textContent = act.name;
    article.appendChild(h3);
    
    const div1 = document.createElement('div');
    div1.setAttribute('id', 'sceneHere');
    
    const h4 = document.createElement('h4');
    h4.textContent = scene.name;
    div1.appendChild(h4);
    
    const p1 = document.createElement('p');
    p1.setAttribute('class', 'title');
    p1.textContent = scene.title;
    div1.appendChild(p1);
    
    const p2 = document.createElement('p');
    p2.setAttribute('class', 'direction');
    p2.textContent = scene.stageDirection;
    div1.appendChild(p2);
    
    displaySpeeches(scene, div1);
    
    article.appendChild(div1);
    playHere.appendChild(article);
  }
  
  function displaySpeeches(scene, div1) {
    scene.speeches.forEach(speech => {
      const div2 = document.createElement('div');
      div2.setAttribute('class', 'speech');
      
      const span = document.createElement('span');
      span.textContent = speech.speaker;
      div2.appendChild(span);
      
      speech.lines.forEach(line => {
        const p3 = document.createElement('p');
        p3.textContent = line;
        div2.appendChild(p3);
      });
      
      if (speech.stagedir) {
        const em = document.createElement('em');
        em.textContent = speech.stagedir;
        div2.appendChild(em);
      }
      
      div1.appendChild(div2);
    });
  }
  */
});
```

```play-module.js
/* In this module, create three classes: Play, Act, and Scene. */

class Play extends Act {
  constructor(playData, playHere, act, scene) {
    super(playData, playHere, act, scene);
  }
  
  displayPlay() {
    super.displayScene();
  }
}

class Act extends Scene {
  constructor(playData, playHere, act, scene) {
    super(scene);
    this.playData = playData;
    this.playHere = playHere;
    this.act = act;
  }
  
  displayScene() {
    const h2 = document.createElement('h2');
    h2.textContent = this.playData.title;
    this.playHere.appendChild(h2);
    
    const article = document.createElement('article');
    article.setAttribute('id', 'actHere');
    
    const h3 = document.createElement('h3');
    h3.textContent = this.act.name;
    article.appendChild(h3);
    
    const div1 = document.createElement('div');
    div1.setAttribute('id', 'sceneHere');
    
    const h4 = document.createElement('h4');
    h4.textContent = this.scene.name;
    div1.appendChild(h4);
    
    const p1 = document.createElement('p');
    p1.setAttribute('class', 'title');
    p1.textContent = this.scene.title;
    div1.appendChild(p1);
    
    const p2 = document.createElement('p');
    p2.setAttribute('class', 'direction');
    p2.textContent = this.scene.stageDirection;
    div1.appendChild(p2);
    
    super.displaySpeeches(div1);
    
    article.appendChild(div1);
    this.playHere.appendChild(article);
  }
}

class Scene {
  constructor(scene) {
    this.scene = scene;
  }
  
  displaySpeeches(div1) {
    this.scene.speeches.forEach(speech => {
      const div2 = document.createElement('div');
      div2.setAttribute('class', 'speech');
      
      const span = document.createElement('span');
      span.textContent = speech.speaker;
      div2.appendChild(span);
      
      speech.lines.forEach(line => {
        const p3 = document.createElement('p');
        p3.textContent = line;
        div2.appendChild(p3);
      });
      
      if (speech.stagedir) {
        const em = document.createElement('em');
        em.textContent = speech.stagedir;
        div2.appendChild(em);
      }
      
      div1.appendChild(div2);
    });
  }
}

export { Play, Act, Scene };
```

Console says, "Cannot access 'Act' before initialization".